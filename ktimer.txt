参考项目
https://github.com/OutThisLife/GoTimer
https://github.com/zhangwei1234/go-timer-wheel
https://github.com/lxmgo/config
https://github.com/astaxie/beego/tree/master/config
https://github.com/go-redis/redis
https://github.com/zgljl2012/go-cli/blob/master/src/cli/cli.go
https://github.com/takama/daemon 守护进程
https://github.com/natefinch/lumberjack  日志
https://github.com/siddontang/ledisdb  redis替代
https://github.com/andelf/go-curl 
https://github.com/ddliu/go-httpclient 
https://github.com/imroc/req 
https://github.com/shopspring/decimal 
https://github.com/alecthomas/kingpin 命令行解析
参考文章
https://my.oschina.net/u/943306/blog/149395
https://dave.cheney.net/2013/10/15/how-does-the-go-build-command-work
http://www.cnblogs.com/zhangym/p/6201603.html
http://www.cnblogs.com/sevenyuan/archive/2013/02/28/2937275.html
http://dmdgeeker.com/goBook/docs/ch07/file.html
http://golangtc.com/t/5448aad4421aa93257000023  ticker
http://ju.outofmemory.cn/entry/
http://studygolang.com/resources/116
http://blog.csdn.net/siddontang/article/details/18370541
http://stackoverflow.com/questions/17797754/ticker-stop-behaviour-in-golang
命令行 http://studygolang.com/articles/4682
格式化输出 http://www.cnblogs.com/golove/p/3284304.html
flag http://blog.studygolang.com/2013/02/%E6%A0%87%E5%87%86%E5%BA%93-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90flag/
http://kaiq.me/2016/01/09/go/golang-flag/
分布式定时器 http://www.cnblogs.com/akwei/p/3170722.html
panic http://studygolang.com/articles/1809
http://www.oschina.net/translate/golang-graceful-stop
https://grisha.org/blog/2014/06/03/graceful-restart-in-golang/
http://stackoverflow.com/questions/11886531/terminating-a-process-started-with-os-exec-in-golang
http://www.cnblogs.com/yjf512/archive/2012/09/03/2668384.html  web
http://www.cnblogs.com/yjf512/archive/2012/08/22/2650873.html
http://www.widuu.com/archives/11/842.html
https://segmentfault.com/a/1190000004445975
http://www.cnblogs.com/yjf512/archive/2012/06/18/2554066.html
http://studygolang.com/articles/5308 request
http://studygolang.com/articles/6518
http://stackoverflow.com/questions/33768557/how-to-bind-an-http-client-in-go-to-an-ip-address  golang bind ip
http://studygolang.com/articles/2300 get post form
http://stackoverflow.com/questions/10781516/how-to-pipe-several-commands-in-go 
http://stackoverflow.com/questions/7172784/how-to-post-json-data-with-curl-from-terminal-commandline-to-test-spring-rest curl
http://blog.csdn.net/wzx19840423/article/details/6587370 curl
https://curl.haxx.se/libcurl/c/curl_easy_setopt.html curl
http://stackoverflow.com/questions/2329571/c-libcurl-get-output-into-a-string
http://stackoverflow.com/questions/19094099/how-to-dump-goroutine-stacktraces 
------------------------------------------
安装git
yum install git

安装go
rz -y go1.8.linux-amd64.tar.gz
tar -zxvf go1.8.linux-amd64.tar.gz -C /usr/local/

设置go环境变量
vi /etc/profile
vi /etc/zsh/zprofile

export GOROOT=/usr/local/go
export GOBIN=$GOROOT/bin
PATH=$PATH:$GOBIN
export PATH
然后让配置立即生效
source /etc/profile
source /etc/zsh/zprofile

开始
git clone https://github.com/kakuilan/ktimer.git
cd ktimer
git config user.name "kakuilan"
git config user.email kakuilan@163.com
git config credential.helper store

设置GOPATH
echo "GOPATH=/root/gopro:/root/ktimer" >> ~/.zshrc
echo "export GOPATH" >> ~/.zshrc
echo "PATH=\$PATH:\$GOPATH/bin" >> ~/.zshrc
source ~/.zshrc


go 版本1.8

源码结构
src:
config
ktimer
cli
log
web

程序目录:
runtime
log


redis持久化:
all-timer 所有的定时器任务,哈希表
second-timer 0~59个秒数的定时器集合,有序集合

配置


编译go install 
http://wiki.jikexueyuan.com/project/go-command-tutorial/0.2.html
http://golangtc.com/t/555dc228b09ecc126600001b
http://blog.csdn.net/Alsmile/article/details/48290223
在环境变量GOPATH中包含多个工作区目录路径时，我们需要在编译命令源码文件前先对环境变量GOBIN进行设置
export GOBIN=/root/ktimer/bin
cd /root/ktimer/src
go install main.go

------------------------------
conf.ini

[default]
#pid文件
pidfile = runtime/ktimer.pid
#最大任务数量
task_max_num = 500000
#最大任务天数
task_max_day = 100
#所有任务池缓存key
task_pool_key = ktimer:tasks:all
#待运转任务缓存key
task_trun_key = ktimer:tasks:second
#任务锁key
task_lcok_key = ktimer:tasks:lock
#任务过期限制.默认执行60秒内的任务,超过则抛弃;为0则不限制,全部执行
task_expire_limit = 60
#相同定时器的间隔限制.默认10秒内,若有多个相同定时器,只保留最后那个.为0则不限制.
task_sametimer_interval = 10
#相同断续器的间隔限制.默认0为不允许存在多个相同断续器.
task_sameticker_interval = 0
#是否打开性能调试
profile_open = 1
#性能调试端口
profile_port = 6060


[web]
#是否启用web
web.enable = 1
#web端口
web.port = 9558
#web监听IP
web.bind_ip = 127.0.0.1
#web允许的IP段
web.allow_ip = 127.,192.,10.
#web访问密码
web.passwd = eCvN5BxH$bJc

[redis]
redis.host = 127.0.0.1
redis.port = 6379
redis.db = 1
redis.passwd = 

[log]
log.dir = log
#日志最大尺寸M
log.maxsize = 10
#日志最多备份
log.maxbackup = 5
#日志保留天数
log.maxage = 30
#服务日志
log.serve_open = 1
log.serve_file = serve.log
#错误日志
log.error_open = 1
log.error_file = error.log
#运行日志
log.runed_open = 1
log.runed_file = runed.log
#web日志
log.webac_open = 1
log.webac_file = webac.log
------------------------------
程序命令列表 --新
查看帮助
	ktimer help
查看版本号
	ktimer version
查看服务状态(是否在运行)
	ktimer status
查看运行时服务的信息
	ktimer info
安装服务到系统
	ktimer install
从系统卸载服务
	ktimer remove
启动服务
	ktimer start
停止服务
	ktimer stop
重启服务
	ktimer restart
统计当前任务总数
	ktimer count
清空删除所有任务
	ktimer clear
获取任务信息
	ktimer get 8610014451
删除定时任务
	ktimer del 8610014451
加入定时任务
	ktimer add -type=timer -time=1 -limit=1 -command="echo -e Hello Ktimer"
	ktimer add -type=ticker -time=1 -limit=0 -command="date --rfc-3339=ns"
更新定时任务
	ktimer update -kid=8610014451 -time=5 -limit=6
显示任务列表(某段时间内)
	ktimer list -starttime=1480848121 -endtime=1490848121
----------------------------------------------
流程:
Init()
1. 检查是否有配置文件
2. 检查redis是否连接
3. 检查日志目录是否可写
4. 检查pid

#默认任务
[task]
default_timer = echo -e Hello Ktimer
default_ticker = date --rfc-3339=ns
任务key = md5(具体任务)+':'+时间
key=>{
'type' : '定时器类型:timer/ticker',
'time' : '间隔秒数或时间戳',
'limit' : '执行次数限制',
'command' : '任务的具体命令',
'run_num' : '已执行次数',
'run_lasttime' : '上次执行时间',
'run_nexttime' : '下次执行时间',
}

./main add -type="ticker" -time=5 -limit=3 -command="date --rfc-3339=ns" abc="x*y=z" efg

WEB端: action包括help/version/info/count/clear/get/del/update
web访问参数：
{
	action : "动作",
	type : "定时器类型",
	time : "执行时间",
	limit : "次数限制",
	command : "具体任务",
	kid : "定时器ID或其他",
	passwd : "访问密码",
	starttime : '显示列表时的起始时间',
	endtime : '显示列表时的结束时间',
}
返回json:
{
    "status" : "处理状态:true,false",
	"code" : "401未授权,200正常返回,500服务器错误",
    "data" : "具体数据",
    "msg" : "提示信息",
}

limit限制
type=timer时,必须大于0
type=ticker时,0为不限制

-----------------------------------------
函数

获取系统时间戳限制
GetSysTimestampLimit() maxSeconds,maxTimestamp

获取主秒数
GetMainSecond()

获取当前时间
GetCurrentTime() int,float32

生成定时器ID
MakeTimerId(command string, type string, time int) uint32 

获取任务详情
GetTaskDetail(kid string) KtaskDetail 

获取任务处理锁
GetTaskDoingLock(kid string) bool,error 

解锁任务处理
UnlockTaskDoing(kid string) bool,error

执行命令行任务
RunCmdTask(tsk string) string,err

执行URL任务
RunUrlTask(tsk string)

-----------------------------------------
插件

git clone https://github.com/takama/daemon.git
go get github.com/takama/daemon
cd daemon/example/
vi myservice.go
var dependencies = []string{"dummy.service"}改成var dependencies = []string{"myservice.service"}
他是用systemd做daemon,这个只对coredump，kill-9会拉起程序，kill时不会拉起，要运维注意
go build myservice.go

import "gopkg.in/natefinch/lumberjack.v2"
go get gopkg.in/natefinch/lumberjack.v2

git clone https://github.com/spaolacci/murmur3.git
go get github.com/spaolacci/murmur3

go get -u github.com/andelf/go-curl
-----------------------------------------
http://studygolang.com/articles/2876 url-parse
获取get参数 
r.FormValue("name1")
r.ParseForm();
r.Form.Get("id")

ReqLog {
	addr
	method
	url
	params
	header
}

http://192.168.128.130:9558/test?action=add&type=timer&time=60&limit=9
curl --data "action=add&type=timer&time=60&limit=9" http://localhost:9558/test
urlencode未能正常接收参数
curl --data-urlencode "action=add&type=timer&time=60&limit=9" http://localhost:9558/test
curl http://127.0.0.1:9510/message/index

web-> command:http://test.com/test?page=1&kt_post={}
保留参数kt_post:json


redis ERR max number of clients reached
http://blog.csdn.net/ijibu/article/details/50151929

内存分析、golang pprof 内存泄露
pprof
然后go tool pprof
http://studygolang.com/articles/7069
http://www.cppblog.com/sunicdavy/archive/2015/04/11/210308.html
http://studygolang.com/articles/4884
http://studygolang.com/articles/2763
http://studygolang.com/articles/3428
http://www.cnblogs.com/ghj1976/p/5473693.html
http://www.cnblogs.com/zhangqingping/p/4345071.html
http://xiaorui.cc/2016/03/20/golang%E4%BD%BF%E7%94%A8pprof%E7%9B%91%E6%8E%A7%E6%80%A7%E8%83%BD%E5%8F%8Agc%E8%B0%83%E4%BC%98/

性能调试
http://192.168.128.130:6060/debug/pprof/
go tool pprof http://localhost:6060/debug/pprof/heap
go tool pprof http://localhost:6060/debug/pprof/profile
> top -10
apt-get install graphviz


rm -rf log/ runtime/ main conf.ini profile_file
add -type=timer -time=5 -limit=0 -command="echo hello ktimer"
add -type=timer -time=1 -limit=0 -command="date --rfc-3339=ns"
add -type=ticker -time=3 -limit=0 -command="date --rfc-3339=ns"
add -type=timer -time=5 -limit=0 -command="touch log/test.txt && date >> log/test.txt"
add -type=timer -time=5 -limit=0 -command="http://127.0.0.1:9558/index/test?page=1&tid=9&kt_post="
add -type=timer -time=2 -limit=0 -command='http://127.0.0.1:9558/index/test?page=1&tid=9&kt_post={"name":"kak","money":45.2}'
add -type=timer -time=2 -limit=0 -command="https://api.afd56.com.cn/crontabs/index?page=1&act=test&kt_post="
add -type=ticker -time=5 -limit=0 -command="date >> log/test.txt"
add -type=ticker -time=2 -limit=0 -command="https://api.afd56.com.cn/crontabs/index?page=1&act=test&kt_post="
add -type=ticker -time=1 -limit=0 -command="https://www.baidu.com/"
ZRANGE ktimer:tasks:second47 0 -1 WITHSCORES
ZRANGE ktimer:tasks:second54 0 -1 WITHSCORES
HGETALL ktimer:tasks:all

go test -test.benchtime 600 -test.memprofile mem.out -test.memprofilerate 8 main.go

---------------------------------------------
rm -rf log/ runtime/ main conf.ini

交叉编译
CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go

mv go/ /usr/local/go
设置go环境变量
vi /etc/profile

export GOROOT=/usr/local/go
export GOBIN=$GOROOT/bin
PATH=$PATH:$GOBIN
export PATH
然后让配置立即生效
source /etc/profile

git clone https://github.com/kakuilan/ktimer.git

设置GOPATH
export GOPATH=/root/ktimer

go get github.com/andelf/go-curl
go get github.com/go-redis/redis
go get github.com/shopspring/decimal
go get github.com/takama/daemon
go get gopkg.in/natefinch/lumberjack.v2
go get github.com/pkg/profile

问题
# pkg-config --cflags libcurl
Package libcurl was not found in the pkg-config search path.
Perhaps you should add the directory containing `libcurl.pc'
to the PKG_CONFIG_PATH environment variable
No package 'libcurl' found
pkg-config: exit status 1
解决
yum install curl-devel

---------------------------------------------











